/**
 * Redistribution and use of this software and associated documentation
 * ("Software"), with or without modification, are permitted provided
 * that the following conditions are met:
 *
 * 1. Redistributions of source code must retain copyright
 *    statements and notices.  Redistributions must also contain a
 *    copy of this document.
 *
 * 2. Redistributions in binary form must reproduce the
 *    above copyright notice, this list of conditions and the
 *    following disclaimer in the documentation and/or other
 *    materials provided with the distribution.
 *
 * 3. The name "Exolab" must not be used to endorse or promote
 *    products derived from this Software without prior written
 *    permission of Exoffice Technologies.  For written permission,
 *    please contact info@exolab.org.
 *
 * 4. Products derived from this Software may not be called "Exolab"
 *    nor may "Exolab" appear in their names without prior written
 *    permission of Exoffice Technologies. Exolab is a registered
 *    trademark of Exoffice Technologies.
 *
 * 5. Due credit should be given to the Exolab Project
 *    (http://www.exolab.org/).
 *
 * THIS SOFTWARE IS PROVIDED BY EXOFFICE TECHNOLOGIES AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT
 * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
 * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL
 * EXOFFICE TECHNOLOGIES OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Copyright 2003-2004 (C) Exoffice Technologies Inc. All Rights Reserved.
 *
 * $Id: Response.java,v 1.1 2004/11/26 01:51:03 tanderson Exp $
 */
package org.exolab.jms.net.connector;

import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.io.Serializable;
import java.lang.reflect.Method;

import org.exolab.jms.net.util.SerializationHelper;


/**
 * A <code>Response</code> wraps the result of a remote method invocation
 *
 * @author <a href="mailto:tma@netspace.net.au">Tim Anderson</a>
 * @version $Revision: 1.1 $ $Date: 2004/11/26 01:51:03 $
 * @see Request
 * @see Connection
 */
public class Response implements Serializable {

    /**
     * The invocation result. May be <code>null</code>
     */
    private Object _object;

    /**
     * An exception generated by the invocation. May be <code>null</code>
     */
    private Throwable _exception;

    /**
     * The invoked method
     */
    private transient Method _method;

    /**
     * Construct a new <code>Response</code> for a successful invocation
     *
     * @param object the result of the invocation
     * @param method the invoked method
     */
    public Response(Object object, Method method) {
        _object = object;
        _method = method;
    }

    /**
     * Construct a new <code>Response</code> for a failed invocation
     *
     * @param exception the exception generated by the invocation
     */
    public Response(Throwable exception) {
        _exception = exception;
    }

    /**
     * Returns the result of the invocation
     *
     * @return the result of the invocation
     */
    public Object getObject() {
        return _object;
    }

    /**
     * Returns the exception generated by the invocation
     *
     * @return the exception, or <code>null</code> if no exception was thrown
     */
    public Throwable getException() {
        return _exception;
    }

    /**
     * Determines if the response is a successful return
     *
     * @return <code>true</code> if the response is a successful return
     */
    public boolean isReturn() {
        return (_exception == null);
    }

    /**
     * Determines if the response is an exception
     *
     * @return <code>true</code> if the response is an exception
     */
    public boolean isException() {
        return !isReturn();
    }

    /**
     * Writes this to a stream
     *
     * @param out the stream to write to
     * @throws IOException if an I/O error occurs
     */
    public void write(ObjectOutput out) throws IOException {
        boolean normal = isReturn();
        out.writeBoolean(normal);
        if (normal) {
            Class type = _method.getReturnType();
            if (type != void.class) {
                SerializationHelper.write(type, _object, out);
            }
        } else {
            out.writeObject(_exception);
        }
    }

    /**
     * Read a response from a stream
     *
     * @param in     the stream to read from
     * @param method the method that the response relates to
     * @return the read response
     * @throws ClassNotFoundException if the response contains a class which
     *                                can't be found
     * @throws IOException            if an I/O error occurs
     */
    public static Response read(ObjectInput in, Method method)
            throws ClassNotFoundException, IOException {
        Response response = null;
        boolean returnResponse = in.readBoolean();
        if (returnResponse) {
            Class type = method.getReturnType();
            Object object = null;
            if (type != void.class) {
                object = SerializationHelper.read(type, in);
            }
            response = new Response(object, method);
        } else {
            Object object = in.readObject();
            response = new Response((Throwable) object);
        }
        return response;
    }

}
